package com.autoever.poc.parser;

import java.util.List;

import com.autoever.poc.parser.can.PolicyParser;
import com.autoever.poc.parser.can.PolicyRepository;
import com.autoever.poc.parser.ccp.ODTParser;
import com.autoever.poc.parser.ccp.ODTRepository;
import com.streambase.sb.CompleteDataType;
import com.streambase.sb.Tuple;
import com.streambase.sb.client.CustomFunctionResolver;

/**
* Generated by JDT StreamBase Client Templates (Version: 11.0.1).
*
* All custom java simple functions must live in a public Java class as a public static method.
* Custom Java simple functions can be accessed by the simple form of calljava in any expression
* except in aggregate functions.
* They may also be aliased for use as if that function were embedded
* in your StreamBase Application.
* <p>
* For in-depth information on implementing a StreamBase simple function, please see some
* related topics from "Developing StreamBase Custom Functions" in the StreamBase 
* documentation.
* <p>
*/
public class ParseUtil {

	@CustomFunctionResolver("GetKeyFlagCustomFunctionResolver0")
	public static boolean GetKeyFlag(String policy, Tuple message) {
		PolicyParser policyParser = PolicyRepository.getInstance().mPolicyMap.get(policy);
		if(policyParser != null) return policyParser.GetKeyFlag(message);
		return false;
	}

	public static CompleteDataType GetKeyFlagCustomFunctionResolver0(CompleteDataType policy, CompleteDataType message) {
		// TODO: Implement custom function resolver functionality here
		return CompleteDataType.forBoolean();
	}
	
	@CustomFunctionResolver("GetTrigDataCustomFunctionResolver0")
	public static List<Tuple> GetTrigData(String policy, Tuple message) {
		PolicyParser policyParser = PolicyRepository.getInstance().mPolicyMap.get(policy);
		if(policyParser != null) return policyParser.GetTrigData(message);
		return null;
	}

	public static CompleteDataType GetTrigDataCustomFunctionResolver0(CompleteDataType policy, CompleteDataType message) {
		// TODO: Implement custom function resolver functionality here
		return CompleteDataType.forList(CompleteDataType.forTuple(PolicyRepository.trigDataSchema));
	}
	
	public static boolean InitPolicyRepository(String dirPath) {
		return PolicyRepository.getInstance().LoadPolicy(dirPath, "xml");
	}
	
	public static boolean InitODTRepository(String dirPath) {
		return ODTRepository.getInstance().LoadEVT(dirPath, "evt");
	}

	@CustomFunctionResolver("GetPolicyParamsCustomFunctionResolver0")
	public static Tuple GetPolicyParams(String policy) {
		PolicyParser policyParser = PolicyRepository.getInstance().mPolicyMap.get(policy);
		return (Tuple)policyParser.toSave();
	}
	
	public static CompleteDataType GetPolicyParamsCustomFunctionResolver0(CompleteDataType policy) {
		return CompleteDataType.forTuple(PolicyParser.saveSchema);
	}

	@CustomFunctionResolver("AssignPolicyParamsCustomFunctionResolver0")
	public static boolean AssignPolicyParams(String policy, Tuple tuple) {
		if(policy.equals("BM-15C-0083")) {
		System.err.println("AssignPolicy:"+ policy);
		}
		PolicyParser policyParser = PolicyRepository.getInstance().mPolicyMap.get(policy);
		policyParser.fromSave(tuple);

		return true;
	}
	
	public static CompleteDataType AssignPolicyParamsCustomFunctionResolver0(CompleteDataType policy, CompleteDataType tuple) {
		return CompleteDataType.forBoolean();
	}

	@CustomFunctionResolver("GetODTParamsCustomFunctionResolver0")
	public static Tuple GetODTParams(long vehicleKeyID) {
		ODTParser odtParser = ODTRepository.getInstance().mODTMap.get(String.valueOf(vehicleKeyID));
		return (Tuple)odtParser.toSave();
	}
	
	public static CompleteDataType GetODTParamsCustomFunctionResolver0(CompleteDataType vehicleKeyID) {
		return CompleteDataType.forTuple(ODTParser.saveSchema);
	}

	@CustomFunctionResolver("AssignODTParamsCustomFunctionResolver0")
	public static boolean AssignODTParams(long vehicleKeyID, Tuple tuple) {
		ODTParser odtParser = ODTRepository.getInstance().mODTMap.get(String.valueOf(vehicleKeyID));
		odtParser.fromSave(tuple);
		return true;
	}
	
	public static CompleteDataType AssignODTParamsCustomFunctionResolver0(CompleteDataType vehicleKeyID, CompleteDataType tuple) {
		return CompleteDataType.forBoolean();
	}
}
